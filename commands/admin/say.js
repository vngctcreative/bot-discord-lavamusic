const { ApplicationCommandOptionType, EmbedBuilder, PermissionFlagsBits } = require('discord.js');
const config = require("../../config.js");

async function say(client, interaction) {
    try {
        // Ki·ªÉm tra quy·ªÅn c·ªßa ng∆∞·ªùi d√πng
        if (!interaction.member.permissions.has(PermissionFlagsBits.Administrator)) {
            const noPermissionEmbed = new EmbedBuilder()
                .setColor('#ff0000')
                .setTitle('‚ùå L·ªói Quy·ªÅn')
                .setDescription('B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán l·ªánh n√†y.');

            await interaction.reply({ embeds: [noPermissionEmbed], ephemeral: true });
            return;
        }

        const message = interaction.options.getString('message');
        const format = interaction.options.getString('format') || 'plaintext';

        if (format === 'embed') {
            const title = interaction.options.getString('title') || null;
            const description = interaction.options.getString('description') || null;
            const imageUrl = interaction.options.getString('image') || null;
            const footer = interaction.options.getString('footer') || null;
            const color = interaction.options.getString('color') || '#ffffff';

            // Ki·ªÉm tra m√†u s·∫Øc
            if (!/^#[0-9A-Fa-f]{6}$/.test(color)) {
                const colorErrorEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå L·ªói M√†u')
                    .setDescription('M√†u embed kh√¥ng h·ª£p l·ªá. ƒê·∫£m b·∫£o m√†u s·∫Øc l√† m√£ hex h·ª£p l·ªá.');

                await interaction.reply({ embeds: [colorErrorEmbed], ephemeral: true });
                return;
            }

            // G·ª≠i ph·∫£n h·ªìi ·∫©n ƒë·ªÉ kh√¥ng l·ªô th√¥ng tin ng∆∞·ªùi d√πng
            await interaction.reply({ content: 'Tin nh·∫Øn ƒëang ƒë∆∞·ª£c g·ª≠i...', ephemeral: true });

            // T·∫°o embed
            const embed = new EmbedBuilder()
                .setColor(color); // S·ª≠ d·ª•ng gi√° tr·ªã m√†u s·∫Øc tr·ª±c ti·∫øp

            if (title) embed.setTitle(title);
            if (description) embed.setDescription(description);
            if (imageUrl) embed.setImage(imageUrl);
            if (footer) embed.setFooter({ text: footer });

            // G·ª≠i tin nh·∫Øn embed t·ª´ bot
            await interaction.channel.send({ embeds: [embed] });

            // C·∫≠p nh·∫≠t ph·∫£n h·ªìi ·∫©n sau khi g·ª≠i tin nh·∫Øn c√¥ng khai
            await interaction.editReply({ content: 'Tin nh·∫Øn embed ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!', ephemeral: true });

        } else {
            if (!message) {
                const errorEmbed = new EmbedBuilder()
                    .setColor('#ff0000')
                    .setTitle('‚ùå L·ªói')
                    .setDescription('Vui l√≤ng cung c·∫•p m·ªôt tin nh·∫Øn.');

                await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
                return;
            }

            // G·ª≠i ph·∫£n h·ªìi ·∫©n ƒë·ªÉ kh√¥ng l·ªô th√¥ng tin ng∆∞·ªùi d√πng
            await interaction.reply({ content: 'Tin nh·∫Øn ƒëang ƒë∆∞·ª£c g·ª≠i...', ephemeral: true });

            // G·ª≠i tin nh·∫Øn c√¥ng khai t·ª´ bot
            await interaction.channel.send(message);

            // C·∫≠p nh·∫≠t ph·∫£n h·ªìi ·∫©n sau khi g·ª≠i tin nh·∫Øn c√¥ng khai
            await interaction.editReply({ content: 'Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!', ephemeral: true });
        }

    } catch (error) {
        console.error('L·ªói khi x·ª≠ l√Ω l·ªánh say:', error);
        const errorEmbed = new EmbedBuilder()
            .setColor('#ff0000')
            .setTitle('‚ùå L·ªói')
            .setDescription('ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.');

        await interaction.reply({ embeds: [errorEmbed], ephemeral: true });
    }
}

module.exports = {
    name: "say",
    description: "üì£ Bot s·∫Ω g·ª≠i tin nh·∫Øn do b·∫°n nh·∫≠p v√†o",
    permissions: [PermissionFlagsBits.Administrator],
    options: [
        {
            name: 'format',
            description: 'Ch·ªçn ƒë·ªãnh d·∫°ng tin nh·∫Øn: plaintext ho·∫∑c embed',
            type: ApplicationCommandOptionType.String,
            required: true,
            choices: [
                { name: 'Plaintext', value: 'plaintext' },
                { name: 'Embed', value: 'embed' }
            ]
        },
        {
            name: 'message',
            description: 'üìù Tin nh·∫Øn b·∫°n mu·ªën bot g·ª≠i (d√†nh cho d·∫°ng plaintext)',
            type: ApplicationCommandOptionType.String,
            required: false
        },
        {
            name: 'title',
            description: 'üìú Ti√™u ƒë·ªÅ c·ªßa embed (d√†nh cho d·∫°ng embed)',
            type: ApplicationCommandOptionType.String,
            required: false
        },
        {
            name: 'description',
            description: 'üìù N·ªôi dung c·ªßa embed (d√†nh cho d·∫°ng embed)',
            type: ApplicationCommandOptionType.String,
            required: false
        },
        {
            name: 'image',
            description: 'üñºÔ∏è URL h√¨nh ·∫£nh c·ªßa embed (d√†nh cho d·∫°ng embed)',
            type: ApplicationCommandOptionType.String,
            required: false
        },
        {
            name: 'footer',
            description: 'üîñ Footer c·ªßa embed (d√†nh cho d·∫°ng embed)',
            type: ApplicationCommandOptionType.String,
            required: false
        },
        {
            name: 'color',
            description: 'üé® M√†u s·∫Øc c·ªßa embed (d√†nh cho d·∫°ng embed, m√£ hex v√≠ d·ª•: #ff0000)',
            type: ApplicationCommandOptionType.String,
            required: false
        }
    ],
    run: say,
};